import elementGenerator from './elementGenerator.service';

const templatingService = {
    getAllTemplates: (name, droppedComponents) => {
        return [
            {
                filePath: 'src/index.js',
                template:
`import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';

ReactDOM.render(<App />, document.getElementById('root'));`
            },
            {
                filePath: 'src/App.js',
                template:
`import React from 'react';
import MainComponent from './components/MainComponent.jsx';

function App() {
    return (
        <MainComponent/>
    );
}

export default App;
`
            },
            {
                filePath: 'package.json',
                template:
`{
    "name": "simplest",
    "version": "0.1.0",
    "private": true,
    "dependencies": {
        "react": "^16.8.6",
        "react-dom": "^16.8.6",
        "react-scripts": "3.0.1"
    },
    "scripts": {
        "start": "react-scripts start",
        "build": "react-scripts build",
        "test": "react-scripts test",
        "eject": "react-scripts eject"
    },
    "eslintConfig": {
        "extends": "react-app"
    },
    "browserslist": {
        "production": [
        ">0.2%",
        "not dead",
        "not op_mini all"
        ],
        "development": [
        "last 1 chrome version",
        "last 1 firefox version",
        "last 1 safari version"
        ]
    }
}
`
            },
            {
                filePath: 'public/index.html',
                template:
`<!DOCTYPE html>
<html lang="en">
    <head>
    <meta charset="utf-8" />
    <link rel="shortcut icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <title>${name}</title>
    </head>
    <body>
    <div id="root"></div>
    </body>
</html>`
            },
            {
                filePath: './src/components/main.css',
                template:
`.element-center {
    text-align: center;
    width: '100%';
}
`
            },
            {
                filePath: './src/components/MainComponent.jsx',
                template:
`import React, { Component } from 'react';
import './main.css';

class MainComponent extends Component {
    state = {  }
    render() {
        return (
            <div>${elementGenerator.generateElements(droppedComponents)}</div>
        );
    }
}

export default MainComponent;
`
            },
            {
                filePath: '.gitignore',
                template:
`# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# nyc test coverage
.nyc_output

# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# TypeScript v1 declaration files
typings/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env

# next.js build output
.next
`
            }
        ];
    }
};

export default templatingService;
